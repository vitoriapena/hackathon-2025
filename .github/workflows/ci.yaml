name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write 
  packages: write
  security-events: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build:
    name: build-test-scan
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      new_tag: ${{ steps.version.outputs.new_tag }}
      image_repo: ${{ env.IMAGE_REPO }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate next version tag
        id: version
        run: |
          # Get the latest tag that matches semantic versioning
          LATEST_TAG=$(git tag -l 'v*.*.*' --sort=-version:refname | head -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            # No previous tags, start with v0.0.1
            NEW_TAG="v0.0.1"
          else
            # Extract version parts (remove 'v' prefix)
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            
            # Increment patch version
            PATCH=$((PATCH + 1))
            NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "version=${NEW_TAG#v}" >> $GITHUB_OUTPUT
          
          echo "Previous tag: $LATEST_TAG"
          echo "New tag: $NEW_TAG"
          
          # Create and push the new tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_TAG" -m "Automated release $NEW_TAG"
          git push origin "$NEW_TAG"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # Temporarily disabled due to SARIF upload permission issues
      # - name: Initialize CodeQL
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: java

      - name: Build and test (Maven)
        run: mvn -B -DskipTests=false package

      - name: Upload JUnit reports
        uses: actions/upload-artifact@v4
        with:
          name: junit-reports
          path: target/surefire-reports/*.xml

      # Temporarily disabled due to SARIF upload permission issues
      # - name: Run CodeQL analysis
      #   uses: github/codeql-action/analyze@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REPO }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=${{ steps.version.outputs.new_tag }}
            type=semver,pattern={{version}},value=${{ steps.version.outputs.new_tag }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.new_tag }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.new_tag }}

      - name: Build container image (local, no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          push: false

      - name: Trivy scan (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: image
          image-ref: ${{ env.IMAGE_REPO }}:${{ github.sha }}
          format: table
          severity: HIGH,CRITICAL
          exit-code: '1'

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
        
      - name: Upload build metadata
        uses: actions/upload-artifact@v4
        with:
          name: image-metadata
          if-no-files-found: error
          path: |
            target/classes/application.properties
            target/quarkus-artifact.properties
